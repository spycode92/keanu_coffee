<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.keanu_coffee.inbound.mapper.InboundMapper">

    <!-- ResultMap -->
    <resultMap id="InboundManagementResultMap" type="com.itwillbs.keanu_coffee.inbound.dto.InboundManagementDTO">
        <result column="orderNumber"    property="orderNumber" />
        <result column="ibwaitIdx"      property="ibwaitIdx" />
        <result column="ibwaitNumber"   property="ibwaitNumber" />
        <result column="arrivalDate"    property="arrivalDate" />
        <result column="supplierName"   property="supplierName" />
        <result column="inboundStatus"  property="inboundStatus" />
        <result column="numberOfItems"  property="numberOfItems" />
        <result column="quantity"       property="quantity" />
        <result column="manager"        property="manager" />
        <result column="note"           property="note" />
    </resultMap>

    <!-- management 총 개수 -->
	<select id="selectInboundCount" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM INBOUND_WAITING iw
		JOIN PURCHASE_ORDER po ON iw.order_idx = po.order_idx
		JOIN SUPPLIER s ON po.supplier_idx = s.supplier_idx
		<where>
			<if test="simpleKeyword != null and simpleKeyword != ''">
				( po.order_number LIKE CONCAT('%', #{simpleKeyword}, '%')
				  OR iw.ibwait_number LIKE CONCAT('%', #{simpleKeyword}, '%') )
			</if>
			<if test="status != null and status != ''">
				AND iw.inbound_status = #{status}
			</if>
			<if test="orderInboundKeyword != null and orderInboundKeyword != ''">
				AND ( po.order_number LIKE CONCAT('%', #{orderInboundKeyword}, '%')
				      OR iw.ibwait_number LIKE CONCAT('%', #{orderInboundKeyword}, '%') )
			</if>
			<if test="vendorKeyword != null and vendorKeyword != ''">
				AND s.supplier_name LIKE CONCAT('%', #{vendorKeyword}, '%')
			</if>
			<if test="inStartDate != null">
				AND DATE(iw.arrival_date) <![CDATA[ >= ]]> #{inStartDate}
			</if>
			<if test="inEndDate != null">
				AND DATE(iw.arrival_date) <![CDATA[ <= ]]> #{inEndDate}
			</if>
		</where>
	</select>
	
	
	<!-- management 리스트 조회 -->
	<select id="selectInboundList" parameterType="map" resultMap="InboundManagementResultMap">
		SELECT
			iw.ibwait_idx       AS ibwaitIdx
			,iw.ibwait_number   AS ibwaitNumber
			,iw.arrival_date    AS arrivalDate
			,iw.quantity        AS quantity
			,iw.number_of_items AS numberOfItems
			,iw.inbound_status  AS inboundStatus
			,iw.manager         AS manager
			,iw.note            AS note
			,po.order_number    AS orderNumber
			,s.supplier_name    AS supplierName
		FROM INBOUND_WAITING iw
		JOIN PURCHASE_ORDER po ON iw.order_idx = po.order_idx
		JOIN SUPPLIER s ON po.supplier_idx = s.supplier_idx
		<where>
			<if test="simpleKeyword != null and simpleKeyword != ''">
				( po.order_number LIKE CONCAT('%', #{simpleKeyword}, '%')
				  OR iw.ibwait_number LIKE CONCAT('%', #{simpleKeyword}, '%') )
			</if>
			<if test="status != null and status != ''">
				AND iw.inbound_status = #{status}
			</if>
			<if test="orderInboundKeyword != null and orderInboundKeyword != ''">
				AND ( po.order_number LIKE CONCAT('%', #{orderInboundKeyword}, '%')
				      OR iw.ibwait_number LIKE CONCAT('%', #{orderInboundKeyword}, '%') )
			</if>
			<if test="vendorKeyword != null and vendorKeyword != ''">
				AND s.supplier_name LIKE CONCAT('%', #{vendorKeyword}, '%')
			</if>
			<if test="inStartDate != null">
				AND DATE(iw.arrival_date) <![CDATA[ >= ]]> #{inStartDate}
			</if>
			<if test="inEndDate != null">
				AND DATE(iw.arrival_date) <![CDATA[ <= ]]> #{inEndDate}
			</if>
		</where>
		ORDER BY iw.ibwait_idx DESC
		<if test="startRow != null and listLimit != null">
		    LIMIT #{startRow}, #{listLimit}
		</if>
	</select>
	
	<!-- 엑셀생성 -->
	<select id="selectInboundListForExcel" parameterType="map" resultMap="InboundManagementResultMap">
		SELECT
			iw.ibwait_idx       AS ibwaitIdx
			,iw.ibwait_number   AS ibwaitNumber
			,iw.arrival_date    AS arrivalDate
			,iw.quantity        AS quantity
			,iw.number_of_items AS numberOfItems
			,iw.inbound_status  AS inboundStatus
			,iw.manager         AS manager
			,iw.note            AS note
			,po.order_number    AS orderNumber
			,s.supplier_name    AS supplierName
		FROM INBOUND_WAITING iw
		JOIN PURCHASE_ORDER po ON iw.order_idx = po.order_idx
		JOIN SUPPLIER s ON po.supplier_idx = s.supplier_idx
		<where>
			<if test="simpleKeyword != null and simpleKeyword != ''">
				( po.order_number LIKE CONCAT('%', #{simpleKeyword}, '%')
				  OR iw.ibwait_number LIKE CONCAT('%', #{simpleKeyword}, '%') )
			</if>
			<if test="status != null and status != ''">
				AND iw.inbound_status = #{status}
			</if>
			<if test="orderInboundKeyword != null and orderInboundKeyword != ''">
				AND ( po.order_number LIKE CONCAT('%', #{orderInboundKeyword}, '%')
				      OR iw.ibwait_number LIKE CONCAT('%', #{orderInboundKeyword}, '%') )
			</if>
			<if test="vendorKeyword != null and vendorKeyword != ''">
				AND s.supplier_name LIKE CONCAT('%', #{vendorKeyword}, '%')
			</if>
			<if test="inStartDate != null">
				AND DATE(iw.arrival_date) <![CDATA[ >= ]]> #{inStartDate}
			</if>
			<if test="inEndDate != null">
				AND DATE(iw.arrival_date) <![CDATA[ <= ]]> #{inEndDate}
			</if>
		</where>
		ORDER BY iw.ibwait_idx DESC
	</select>


    <!-- 상세 데이터 -->
    <select id="selectInboundDetailData"
        resultType="com.itwillbs.keanu_coffee.inbound.dto.InboundDetailDTO">
	    SELECT 
	        iw.ibwait_idx              AS ibwaitIdx,
	        iw.ibwait_number           AS ibwaitNumber,
	        iw.arrival_date            AS arrivalDate,
	        po.order_number            AS orderNumber,
	        po.inbound_classification  AS inboundClassification,
	        s.supplier_idx             AS supplierIdx,
	        s.supplier_name            AS supplierName,
	        iw.manager                 AS managerName,
	        iw.inbound_location        AS inboundLocation,
	        iw.number_of_items         AS numberOfItems,
	        iw.quantity                AS quantity,
	        iw.inbound_status          AS inboundStatus,
	        SUM(poi.quantity * poi.unit_price * 1.1) AS totalPrice,
	        iw.note                    AS note
	    FROM INBOUND_WAITING iw
	    JOIN PURCHASE_ORDER po ON iw.order_idx = po.order_idx
	    JOIN SUPPLIER s ON po.supplier_idx = s.supplier_idx
	    JOIN PURCHASE_ORDER_ITEM poi ON po.order_idx = poi.order_idx
	    WHERE iw.ibwait_idx = #{ibwaitIdx}
	    GROUP BY iw.ibwait_idx, iw.ibwait_number, iw.arrival_date,
	             po.order_number, po.inbound_classification,
	             s.supplier_idx, s.supplier_name, iw.manager,         
	             iw.inbound_location,
	             iw.number_of_items, iw.quantity, iw.inbound_status, iw.note
	</select>



    <!-- 상세 상품 데이터 -->
    <select id="selectInboundProductDetail" 
        resultType="com.itwillbs.keanu_coffee.inbound.dto.InboundProductDetailDTO">
	    SELECT 
	         p.product_idx            AS productIdx,
	         poi.lot_number           AS lotNumber,
	         p.product_name           AS productName,
	         p.product_volume         AS productVolume,
	         poi.quantity             AS quantity,
	         poi.unit_price           AS unitPrice,
	         (poi.quantity * poi.unit_price)        AS amount,
	         (poi.quantity * poi.unit_price * 0.1)  AS tax,
	         (poi.quantity * poi.unit_price * 1.1)  AS totalPrice,
	         rp.manufacture_date      AS manufactureDate,
	         rp.expiration_date       AS expirationDate
	    FROM PURCHASE_ORDER_ITEM poi
	    JOIN PRODUCT p 
	         ON poi.product_idx = p.product_idx
	    JOIN PURCHASE_ORDER po 
	         ON poi.order_idx = po.order_idx
	    LEFT JOIN RECEIPT_PRODUCT rp
	         ON rp.product_idx = poi.product_idx
	        AND rp.lot_number = poi.lot_number
	        AND rp.ibwait_idx = (
	            SELECT iw.ibwait_idx
	            FROM INBOUND_WAITING iw
	            WHERE iw.order_idx = po.order_idx
	            LIMIT 1
	        )
	    WHERE po.order_number = #{orderNumber}
	    ORDER BY p.product_name ASC
	</select>

    <!-- 로케이션 업데이트 -->
    <update id="updateLocation">
        UPDATE INBOUND_WAITING
        SET inbound_location = #{inboundLocationNum},
            updated_at = NOW()
        WHERE ibwait_idx = #{ibwaitIdx}
    </update>

    <!-- 매니저 조회 -->
    <select id="selectEmployeeList" resultType="com.itwillbs.keanu_coffee.admin.dto.EmployeeInfoDTO">
        SELECT emp_idx AS empIdx,
               emp_name AS empName
        FROM EMPLOYEE_INFO
        WHERE department_idx = 2
          AND role_idx = 2
          AND emp_status = '재직'
    </select>

    <!-- 매니저 업데이트 -->
    <update id="updateManagers">
	    UPDATE INBOUND_WAITING
	    SET manager = #{managerName},
	        updated_at = NOW()
	    WHERE ibwait_idx IN
	    <foreach collection="ibwaitIdxList" item="id" open="(" separator="," close=")">
	        #{id}
	    </foreach>
	</update>


    <!-- 검수 데이터 존재 여부 -->
    <select id="selectDataExists" resultType="int">
        SELECT EXISTS(
            SELECT 1
            FROM RECEIPT_PRODUCT
            WHERE ibwait_idx=#{ibwaitIdx}
              AND product_idx=#{productIdx}
              AND lot_number=#{lotNumber}
        )
    </select>

    <!-- INSERT receipt_product -->
	<insert id="insertReceiptProduct"
	        parameterType="com.itwillbs.keanu_coffee.inbound.dto.ReceiptProductDTO"
	        useGeneratedKeys="true"
	        keyProperty="receiptProductIdx"
	        keyColumn="receipt_product_idx">
	    INSERT INTO RECEIPT_PRODUCT (
	        ibwait_idx, supplier_idx, product_idx, lot_number,
	        manufacture_date, expiration_date, quantity,
	        received_at, emp_idx, created_at, updated_at
	    )
	    VALUES (
	        #{ibwaitIdx},
	        #{supplierIdx},
	        #{productIdx},
	        #{lotNumber},
	        #{manufactureDate},
	        #{expirationDate},
	        #{quantity},
	        NOW(),
	        #{empIdx},
	        NOW(),
	        NOW()
	    )
	</insert>


    <!-- UPDATE receipt_product -->
    <update id="updateReceiptProduct" parameterType="com.itwillbs.keanu_coffee.inbound.dto.ReceiptProductDTO">
	    UPDATE RECEIPT_PRODUCT
	    SET lot_number = #{lotNumber},
	        quantity   = #{quantity},
	        emp_idx    = #{empIdx},
	        updated_at = NOW()
	    WHERE receipt_product_idx = #{receiptProductIdx}
	</update>
    

    <!-- UPDATE purchase_order_item -->
    <update id="updatePurchaseOrderItemAfterInspection" parameterType="com.itwillbs.keanu_coffee.inbound.dto.ReceiptProductDTO">
        UPDATE PURCHASE_ORDER_ITEM
        SET lot_number  = #{lotNumber},
            quantity    = #{quantity},
            unit_price  = #{unitPrice},
            total_price = #{quantity} * #{unitPrice}
        WHERE order_idx = (
            SELECT order_idx FROM INBOUND_WAITING WHERE ibwait_idx = #{ibwaitIdx}
        )
          AND product_idx = #{productIdx}
    </update>
	
	<!-- 입고 상태 변경 -->
	<update id="updateInboundStatus">
	    UPDATE INBOUND_WAITING
	    SET inbound_status = #{status},
	        updated_at = NOW()
	    WHERE ibwait_idx = #{ibwaitIdx}
	</update>
	
	<!-- 인벤토리 등록 -->
	<insert id="insertInventory" parameterType="com.itwillbs.keanu_coffee.inbound.dto.CommitInventoryDTO$InventoryItemDTO">
	    INSERT INTO INVENTORY (
	        receipt_product_idx,
	        location_idx,
	        location_name,
	        product_idx,
	        quantity,
	        lot_number,
	        manufacture_date,
	        expiration_date,
	        created_at,
	        updated_at
	    )
	    VALUES (
	        #{receiptProductIdx},
	        #{locationIdx},
	        #{locationName},
	        #{productIdx},
	        #{quantity},
	        #{lotNumber},
	        #{manufactureDate},
	        #{expirationDate},
	        NOW(),
	        NOW()
	    )
	</insert>





	
	<!-- 상태 이력 조회 (로그 + 날짜) -->
	<select id="selectInboundStatusHistory" parameterType="int" resultType="com.itwillbs.keanu_coffee.inbound.dto.InboundStatusHistoryDTO">
		SELECT '운송중' AS status, DATE_FORMAT(po.order_date, '%Y-%m-%d %H:%i:%s') AS changedAt
		FROM PURCHASE_ORDER po
		JOIN INBOUND_WAITING iw ON po.order_idx = iw.order_idx
		WHERE iw.ibwait_idx = #{ibwaitIdx}
		
		UNION ALL
		
		SELECT '대기' AS status, DATE_FORMAT(iw.arrival_date, '%Y-%m-%d %H:%i:%s') AS changedAt
		FROM INBOUND_WAITING iw
		WHERE iw.ibwait_idx = #{ibwaitIdx}
		
		UNION ALL
		
		SELECT target AS status, DATE_FORMAT(created_at, '%Y-%m-%d %H:%i:%s') AS changedAt
		FROM SYSTEM_LOG
		WHERE target_idx = #{ibwaitIdx}
		  AND section = '입고관리'
		  AND target IN ('검수중','검수완료','재고등록완료')
		
		ORDER BY changedAt ASC
	</select>
	
	<select id="selectReceiptProductIdx" resultType="int">
	    SELECT receipt_product_idx
	    FROM RECEIPT_PRODUCT
	    WHERE ibwait_idx = #{ibwaitIdx}
	      AND product_idx = #{productIdx}
	      AND lot_number = #{lotNumber}
	    ORDER BY created_at DESC
	    LIMIT 1
	</select>
	
	
</mapper>
