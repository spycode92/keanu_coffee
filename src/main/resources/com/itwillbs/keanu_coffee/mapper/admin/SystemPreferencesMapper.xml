<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.keanu_coffee.admin.mapper.SystemPreferencesMapper">
	
	
	<!--전체부서목록 가져오기 -->
	<select id="getDepartmentInfo" resultType="DepartTeamRoleDTO" >
		SELECT *
		FROM department
	</select>
	
	<!-- 해당부서 팀목록 가져오기 -->
	<select id="getTeamsInfoByDepartmentIdx" resultType="DepartTeamRoleDTO">
		SELECT *
		FROM team
		WHERE department_idx = #{departmentIdx}
	</select>
	
	<!-- 해당부서 직책목록 가져오기 -->
	<select id="getRolesInfoByDepartmentIdx" resultType="DepartTeamRoleDTO">
		SELECT *
		FROM role
		WHERE department_idx = #{departmentIdx}
	</select>
	
	<!-- 부서추가하기 -->
	<insert id="insertDepartment"  parameterType="DepartTeamRoleDTO" useGeneratedKeys="true" keyProperty="idx">
		INSERT into department(department_name)
		VALUES(	#{departmentName})
	</insert>
	
	<!-- 팀추가하기 -->
	<insert id="insertTeam"  parameterType="DepartTeamRoleDTO" useGeneratedKeys="true" keyProperty="idx">
		INSERT into team(team_name, department_idx)
		VALUES(	#{teamName}, #{departmentIdx})
	</insert>
	
	<!-- 직책추가하기 -->
	<insert id="insertRole"  parameterType="DepartTeamRoleDTO" useGeneratedKeys="true" keyProperty="idx">
		INSERT into role(role_name, department_idx)
		VALUES(	#{roleName}, #{departmentIdx})
	</insert>

	<!-- 직책삭제하기 -->
	<delete id="deleteRole" parameterType="long" > 
		DELETE FROM role
		where idx = #{roleIdx}
	</delete>
	
	<!-- 직책,메뉴,권한 테이블이 가지고있는 직책 삭제 -->
	<delete id="deleteRoleMenuAuthoByRoleIdx">
		DELETE FROM role_menu_autho
		where role_idx = #{roleIdx}
	</delete>
	
	<!--  팀삭제 -->
	<delete id="deleteTeam">
		DELETE FROM team
		where idx = #{teamIdx}
	</delete>
	
	<!-- 부서에속한 팀목록 -->
	<select id="departTeamList" resultType="departTeamRoleDTO">
		SELECT idx
		from team
		where department_idx = #{departmentIdx}
	</select>
	
	<!-- 부서에속한 직책목록 -->
	<select id="departRoleList">
		SELECT idx
		from role
		where department_idx = #{departmentIdx}
	</select>
	
	<!-- 부서삭제 -->
	<delete id="deleteDepartment">
		DELETE FROM department
		where idx = #{departmentIdx}
	</delete>
	
	<!-- 부서이름 수정 -->
	<update id="updateDepartment">
		UPDATE department 
		SET department_name = #{departmentName}
		where idx = #{idx}
	</update>
	
	<!-- 팀이름변경 -->
	<update id="updateTeam">
		UPDATE team
		SET team_name = #{teamName}
		where idx = #{idx}
	</update>
	
	<!-- 직책이름변경 -->
	<update id="updateRole">
		UPDATE role
		SET role_name = #{roleName}
		where idx = #{idx}
	</update>
	
	<!-- 공급업체리스트 -->
	<select id="selectSuppliersInfo" resultType="SupplierProductContractDTO">
		SELECT 
		    s.idx,
		    s.supplier_name,
		    s.supplier_manager,
		    s.supplier_manager_phone,
		    s.supplier_zipcode,
		    s.supplier_address1,
		    s.supplier_address2,
		    -- 계약이 존재하면 1, 아니면 0
		    CASE WHEN COUNT(spc.idx) > 0 THEN 1 ELSE 0 END AS hasContract
		FROM 
		    supplier s
		LEFT JOIN 
		    supplier_product_contract spc
		    ON s.idx = spc.supplier_idx
		    AND spc.status = '활성'
		GROUP BY 
		    s.idx
		ORDER BY 
		    s.idx;
	</select>
	
	<!-- 등록된상품리스트 -->
	<select id="selectProductsInfo" resultType="SupplierProductContractDTO">
		SELECT *
		FROM product
	</select>
	
	<!-- 등록계약리스트 -->
	<select id="selectSupplyContractsInfo" resultType="SupplierProductContractDTO">
		SELECT *
		FROM v_supplier_product_contract_summary
		where status &lt;&gt; '삭제'
	</select>
	
	<!-- 공급업체등록 -->
	<insert id="insertSupplier" parameterType="SupplierProductContractDTO" useGeneratedKeys="true" keyProperty="idx">
		INSERT INTO supplier
			(supplier_name
			, supplier_manager
			, supplier_manager_phone
			, supplier_zipcode
			, supplier_address1
			, supplier_address2)
		VALUES
			(#{supplierName}
			, #{supplierManager}
			, #{supplierManagerPhone}
			, #{supplierZipcode}
			, #{supplierAddress1}
			, #{supplierAddress2})
	</insert>
	
	<!-- 공급업체필터링 -->
	<select id="selectSupplierByStatus" resultType="SupplierProductContractDTO">
		SELECT * FROM supplier
    	WHERE status = #{dbStatus}
	</select>
	
	<!-- 공급업체의 활성화된 계약 갯수 -->
	<select id="countActiveContractsBySupplier" resultType="int" parameterType="long">
		SELECT COUNT(*)
		FROM supplier_product_contract
		WHERE supplier_idx = #{supplierIdx}
		AND status = '활성'
	</select>
	
	<!-- 공급업체 삭제 -->
	<delete id="deleteSupplierByIdx" parameterType="long">
		DELETE FROM supplier
		WHERE idx = #{supplierIdx}
	</delete>
	
	<!-- 공급업체상세정보 -->
	<select id="selectSupplierInfo" resultType="SupplierProductContractDTO">
		SELECT *
		FROM supplier
		WHERE idx = #{idx}
	</select>
	
	<!-- 공급업체정보수정 -->
	<update id="updateSupplier">
		UPDATE supplier
		SET
			supplier_name = #{supplierName}
			, supplier_manager = #{supplierManager}
			, supplier_manager_phone = #{supplierManagerPhone}
			, supplier_zipcode = #{supplierZipcode}
			, supplier_address1 = #{supplierAddress1}
		    , supplier_address2 = #{supplierAddress2}
		WHERE idx = #{idx}
	</update>

	<!-- 카테고리 전체 불러오기 -->
	<resultMap id="categoryResultMap" type="SupplierProductContractDTO">
	    <result property="idx" column="idx" />
	    <result property="categoryName" column="categoryName" />
	    <result property="parentCategoryIdx" column="parentCategoryIdx" />
	    <result property="parentCategoryName" column="parentCategoryName" />
	</resultMap>
	
	<select id="selectAllCategoriesAsMap" resultMap="categoryResultMap">
		SELECT c.idx
		, c.category_name as categoryName
		, c.parent_category_idx as parentCategoryIdx
		, p.category_name as parentCategoryName
		FROM category c
		LEFT JOIN category p ON c.parent_category_idx = p.idx
	</select>
	
	<!-- 카테고리추가 -->
	<insert id="insertCategory">
		insert INTO category
		(category_name, parent_category_idx)
		VALUES
		(#{categoryName}, #{parentCategoryIdx})
	</insert>
	
	<!-- 카테고리수정 -->
	<update id="updateCategory">
		UPDATE category
		set category_name = #{categoryName}
		where idx = #{idx}
	</update>
	
	<!-- 카테고리에 제품이들어있나확인 -->
	<select id="countProductByCategoryIdx" resultType="int">
		SELECT count(*)
		FROM product
		where category_idx = #{idx}
	</select>
	
	<!-- 자식카테고리가있나확인 -->
	<select id="countCategoryByCategoryIdx" resultType="int">
		SELECT count(*)
		FROM category
		where parent_category_idx = #{idx}
	</select>
	
	<!-- 카테고리삭제 -->
	<delete id="deleteCategory">
		DELETE FROM category
		where idx = #{idx}
	</delete>
	
	<!-- 상품등록 -->
	<insert id="insertProduct" parameterType="SupplierProductContractDTO" 
		useGeneratedKeys="true" keyProperty="idx"> 
		INSERT INTO product
    (
        product_name,
        category_idx,
        product_weight,
        product_width,
        product_length,
        product_height,
        product_volume,
        product_from,
        note
    )
    VALUES
    (
        #{productName},
        #{categoryIdx},
        #{productWeight},
        #{productWidth},
        #{productLength},
        #{productHeight},
        #{productVolume},
        #{productFrom},
        #{note}
    )
	</insert>
	
	<!-- 상품목록전체불러오기 -->
	<select id="selectAllProductList" resultType="SupplierProductContractDTO">
		SELECT *
		FROM product
		WHERE status = 1
	</select>
	
	<!-- 상품대분류 목록불러오기 -->
	<select id="selectProductByCategoryIdxList" resultType="SupplierProductContractDTO">
		SELECT *
	    FROM product
	    WHERE category_idx IN
		    <foreach collection="list" item="categoryIdx" open="(" separator="," close=")">
		        #{categoryIdx}
		    </foreach>
		    AND
		    status = 1
	</select>
	
	<!-- 소븐류 상품 필터링 -->
	<select id="selectProductsByCategoryIdx" resultType="SupplierProductContractDTO">
	    SELECT *
	    FROM product
	    WHERE category_idx = #{categoryIdx}
	    	AND
		    status = 1
	</select>
	
	<!-- 상품상세정보 -->
	<select id="selectProductByProductIdx" resultType="SupplierProductContractDTO">
		SELECT 
		    p.idx AS productIdx,
		    p.product_name AS productName,
		    c.idx AS categoryIdx,
		    c.category_name AS categoryName,
		    pc.idx AS parentCategoryIdx,
		    pc.category_name AS parentCategoryName,
		    p.product_weight AS productWeight,
		    p.product_width AS productWidth,
		    p.product_length AS productLength,
		    p.product_height AS productHeight,
		    p.product_volume AS productVolume,
		    p.product_from AS productFrom,
		    p.note
		  FROM product p
		  LEFT JOIN category c ON p.category_idx = c.idx
		  LEFT JOIN category pc ON c.parent_category_idx = pc.idx
		  WHERE p.idx = #{productIdx}
	</select>
	
	<!-- 상품정보수정 -->
	<update id="updateProduct" parameterType="SupplierProductContractDTO">
		UPDATE product
		SET 
			product_name = #{productName}
	        , category_idx = #{categoryIdx}
	        , product_weight = #{productWeight}
	        , product_width = #{productWidth}
	        , product_length = #{productLength}
	        , product_height = #{productHeight}
	        , product_volume = #{productVolume}
	        , product_from = #{productFrom}
	        , note = #{note}
		WHERE idx = #{productIdx}
	</update>
	
	<!-- 상품상태변경 -->
	<update id="updateProductStatus">
		UPDATE product
		SET
			status = #{status}
		WHERE
			idx = #{productIdx}
	</update>
	
	<!-- 계약등록 -->
	<insert id="insertContract">
		INSERT into supplier_product_contract
		(
	        supplier_idx,
	        product_idx,
	        contract_price,
	        contract_start,
	        contract_end,
	        min_order_quantity,
	        max_order_quantity,
	        status,
	        note
	    )
	    VALUES
	    (
	        #{supplierIdx},
	        #{productIdx},
	        #{contractPrice},
	        #{contractStart},
	        #{contractEnd},
	        #{minOrderQuantity},
	        #{maxOrderQuantity},
	        #{status},
	        #{note}
	    )
	
	</insert>
	
	<!-- 계약상세 -->
	<select id="selectContractDetail" resultType="SupplierProductContractDTO">
		SELECT
		    spc.idx AS contractIdx,
		    spc.contract_price AS contractPrice,
		    spc.contract_start AS contractStart,
		    spc.contract_end AS contractEnd,
		    spc.status AS status,
		    spc.note AS contractNote,
		    spc.min_order_quantity As minOrderQuantity,
		    spc.max_order_quantity As maxOrderQuantity,
		    spc.note ,
		    s.idx AS supplierIdx,
		    s.supplier_name AS supplierName,
		    p.idx AS productIdx,
		    p.product_name AS productName,
		    f.idx AS fileIdx
		FROM
		    supplier_product_contract AS spc
		LEFT JOIN
		    supplier AS s ON spc.supplier_idx = s.idx
		LEFT JOIN
		    product AS p ON spc.product_idx = p.idx
		LEFT JOIN
		    file AS f ON f.target_table = 'product' AND f.target_table_idx = p.idx
		WHERE spc.idx = #{idx}
	</select>
	
	<!-- 계약수정 -->
	<update id="updateContractDetail" parameterType="SupplierProductContractDTO">
		UPDATE supplier_product_contract
	    SET
	        contract_price = #{contractPrice},
	        contract_start = #{contractStart},
	        contract_end = #{contractEnd},
	        min_order_quantity = #{minOrderQuantity},
	        max_order_quantity = #{maxOrderQuantity},
	        status = #{status},
	        note = #{note}
	    WHERE idx = #{idx}
	</update>
	
	<!-- 계약삭제 -->
	<update id="deleteContractDetail">
		UPDATE supplier_product_contract
		SET
			status = #{status}
		WHERE idx = #{idx}
	</update>




</mapper>
